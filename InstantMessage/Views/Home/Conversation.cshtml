@model InstantMessage.Models.User
@{
    ViewBag.Title = "Conversation";
}
<style>
        .flex-container {
            display: flex;
            flex-direction: column;
            width: 800px;
            height: 250px;
            background-color: lightgrey;
        }

        .flex-item {
            background-color: white;
            width: 400px;
            height: 30px;
            margin: 10px;
        }

        #conversation-content {
            background-color: white;
            width: 400px;
            height: 200px;
            margin: 10px
        }

        #contact-block {
            background-color: white;
            width: 400px;
        }

        /* The side navigation menu */
        .sidenav {
            height: 100%; /* 100% Full-height */
            width: 0; /* 0 width - change this with JavaScript */
            position: fixed; /* Stay in place */
            z-index: 1; /* Stay on top */
            top: 0;
            left: 0;
            background-color: lightgray; /* grey*/
            overflow-x: hidden; /* Disable horizontal scroll */
            padding-top: 60px; /* Place content 60px from the top */
            transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
        }

            /* The navigation menu links */
            .sidenav a {
                padding: 8px 8px 8px 32px;
                text-decoration: none;
                font-size: 25px;
                color: #818181;
                display: block;
                transition: 0.3s
            }


    /* When you mouse over the navigation links, change their color */
    .sidenav a:hover, .offcanvas a:focus {
        color: #f1f1f1;
    }

            /* Position and style the close button (top right corner) */
            .sidenav .closebtn {
                position: absolute;
                top: 20px;
                right: 25px;
                font-size: 36px;
                margin-left: 50px;
            }

        /* Style page content - use this if you want to push the page content to the right when you open the side navigation */
        #main {
            transition: margin-left .5s;
            padding: 20px;
        }

        /* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size)
      see https://www.w3schools.com/howto/howto_js_sidenav.asp
    */
</style>

<div id="mySideNav" class="sidenav">
    <!--
        <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    -->
     <h5>Conversations</h5>
</div>

<div id="newConversationSideNav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNewConversationNav()">&times;</a>
    <h4>Select a contact</h4>
    <div class="flex-item" id="selectedContact"><div class="flex-item">Conversation with:<div id="contact-block"></div></div></div>
    <button id="startNewButton" class="button">Start Conversation</button>
</div>

<div id="main">
    <div class="container">
        <!-- Modal -->
        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Modal Header</h4>
                    </div>
                    <div class="modal-body">
                        <form>
                            Give your conversation a name:<br>
                            <input type="text" id="conName" name="conName"><br>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" id="conNameButton" class="btn btn-default" data-dismiss="modal">Ok</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="newMessageNotification">
        <span id=newMessageNotificationId></span>
        <span style="font-size:20px" id="newMessageNotificationSpan">Notifications</span>
    </div>
    <div>
        <span style="font-size:30px;cursor:pointer" id="newConversationNavSpan" onclick="openNewConversationNav()">&#9776; New Conversation</span>
    </div>
    <div>
        <span style="font-size:30px;cursor:pointer" id="existingConversationNavSpan" onclick="openNav()">&#9776; View Conversations</span>
    </div>
    <div id="connectionStatus">
        <span style="font-size:15px" id="connectionSpan">&#9776; Connection Status: Not Connected </span>
    </div>

    <div id="conversation-container">
       <div class="flex-item" id="conversation-content" style="overflow: scroll; width: 500px; height: 200px;">
           <h4 id="conversationHeading"></h4>
            <input type="hidden" id="displayname" />
            <ul id="discussion"></ul>
        </div>
        <div class="flex-item" id="message-div">
            <input type="text" id="message" />
            <input type="button" id="sendmessage" value="Send" />
        </div>
    </div>  
</div>



@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->

    <script>
        ///Auxillary Functions///

        function makeConvDivInvisible() {
            var conDiv = document.getElementById('conversation-container');
            var content = document.getElementById('conversation-content');
            var message = document.getElementById('message-div');
            content.style.display = 'none';
            message.style.display = 'none';
            conDiv.style.display = 'none';
        }

        function makeConvDivVisible() {
            var conDiv = document.getElementById('conversation-container');
            var content = document.getElementById('conversation-content');
            var message = document.getElementById('message-div');
            content.style.display = 'block';
            message.style.display = 'block';
            conDiv.style.display = 'block';
        }

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

    
        /* Set the width of the side navigation to 250px and the left margin of the page content to 250px */
        function openNav() {
            document.getElementById("mySideNav").style.width = "250px";
            document.getElementById("main").style.marginLeft = "250px";
        }

        //for development purposes leave nav open on load
        $(function () {
            openNav();
        })

        function openNewConversationNav() {
            document.getElementById("newConversationSideNav").style.width = "250px";
            document.getElementById("main").style.marginLeft = "250px";
        }

        /*NOT IN USE Set the width of the side navigation to 0 and the left margin of the page content to 0 */
        function closeNav() {
            document.getElementById("mySideNav").style.width = "0";
            document.getElementById("main").style.marginLeft = "250px";
        }

        function closeNewConversationNav() {
            document.getElementById("newConversationSideNav").style.width = "0";
            document.getElementById("main").style.marginLeft = "250px";
        }

        /*
        Global Variables (Should be encapsulated?)
        */
        var RECIPIENTS = [];
        var LIVECONVERSATIONID = null;
        var CONVERSATIONNAME = null;
        var CONNECTED = false;
        var CHAT = $.connection.chatHub;
        var ONSCREENCONVERSATION = null;
      
        var ALLCONTACTS = [];
        var ALLCONVERSATIONS = [];

         //////Models///////

        function Conversation(con) {
            this.conversationID = con.ConversationID;
            this.name = con.Name;
            this.lastMessage = con.LastMessage;
            this.lastEdited = con.LastEdited;
            this.loaded = false;
            this.messages = [];
            this.addMessage = function (message) {
                this.messages.push(message);
            }
            this.unpackMessages = function () {
                return this.messages;
            }
        }

        function Message(message, user, conversationID) {
            this.content = message.Content;
            this.messageID = message.MessageID;
            this.sender = user;
            this.conversationID = conversationID;
            this.sent = message.Sent;
        }

        function Contact(user) {
            this.userID = user.UserID;
            this.userName = user.UserName;
            this.firstName = user.FirstName;
            this.LastName = user.LastName;
        }


        /*
        Start Up and Reconnection 
        */
        $.connection.hub.start()
            .done(
            $.connection.hub.logging = true,
            function () {
                console.log("success");
                CONNECTED = true;
                setConnectionStatus();
            }).fail(function () {
                CONNECTED = false;
                setConnectionStatus();
            });

        //attempt to reconnect 5 seconds after connection drops//refactor this with method above
        //to reduce code duplication. 
        $.connection.hub.disconnected(function () {
            setTimeout(function () {
                $.connection.hub.start().done(
                    $.connection.hub.logging = true,
                    function () {
                        console.log("success");
                        CONNECTED = true;
                        setConnectionStatus();
                    }).fail(function () {
                        CONNECTED = false;
                        setConnectionStatus();
                        console.log("connection attempt failed");
                    })
            }, 5000); // Restart connection after 5 seconds.
        });

        /*
        Functions Called on Connection/Reconnection
        */
        function onConnected() {
                    //  getAllConversations();
                }
        

        function getAllConversations() {
            $(".conItem").remove();
            CHAT.server.getAllConversations();
        }

        function setConnectionStatus() {
            if (CONNECTED == true) {
                $("#connectionSpan").text("");
                $("#connectionSpan").text("Connection Status: Connected!");
            }
            else if (CONNECTED == false) {
                $("#connectionSpan").text("");
                $("#connectionSpan").text("Connection Status: No Connection");
            }
        }

        /*
            Loading Conversation Side Bar
        */

        //generate a list of conversations in side bar upon click
        $('#existingConversationNavSpan').click(function () {
            getAllConversations();
        })  

        /*
        Displaying Conversations
        */
        CHAT.client.returnConversationDetails = function (conID) {
            LIVECONVERSATIONID = conID;
            console.log(LIVECONVERSATIONID + "LIVECONVERSATIONID");
        }

        $('#mySideNav').on('click', 'a', function (event) {
            var conId = $(this).attr('id');
            var conName = $(this).attr('data-address');
            accessConversation(conId, conName);
        })


        function accessConversation(conID, conName) {
            var loaded = checkIfLoaded(conID);
            if (loaded == true)
            {
                setDisplayForConversation(conID, conName);
                displayCachedConversation(conID)
                console.log("loaded boolean is true");
            }
            else
            {
                setDisplayForConversation(conID, conName);
                loadConversationFromServer(conID, conName);
                console.log("loaded boolean is false");
            }
        }
        
        function checkIfLoaded(conID) {
            for (var i = 0; i < ALLCONVERSATIONS.length; i++)
            {
                //correct equality??
                if (ALLCONVERSATIONS[i].conversationID == conID)
                {
                    if (ALLCONVERSATIONS[i].loaded === true)
                    { 
                        return true; 
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            return false;
        }

        //this can be used whether or not the conversation has already been loaded..
        function setDisplayForConversation(conId, conName) {
            //set conversationId for any new messages. 
            LIVECONVERSATIONID = conId;
            ONSCREENCONVERSATION = conId
            //reset notifications since user has accessed sideNav
            $('#newMessageNotificationSpan').text("Notifications:");
            $('#discussion').empty();
            $('#conversationHeading').text("");

            if (conName !== undefined) {
                $('#conversationHeading').text('Details:  ' + conName);
            }
        }

        function loadConversationFromServer(conId, conName) {
            CHAT.server.openConversation(conId);
        }

        $(function () {
            CHAT.client.setOnScreenConversation = function (conId) {
                console.log(" CHAT.client.setOnScreenConversation --" +conId);
                ONSCREENCONVERSATION = conId;
                console.log("On screen conversations set = " + ONSCREENCONVERSATION);

            }
        })


        $(function () {
            CHAT.client.updateConversations = function () {
                conversationSort();
                displayConversations();
            }
        })
            //sort Conversations according to Last Edited.
        function conversationSort() {
            ALLCONVERSATIONS.sort(function (a, b) {
                var conA = a.lastEdited.toUpperCase();
                var conB = b.lastEdited.toUpperCase();
                if (conA < conB) {
                    return -1;
                }
                if (conA > conB) {
                    return 1;
                }
                return 0;
            });
        }       

        /*
        Loading, Displaying, Sending Messages
        */
       

        //load message function
        $(function () {
            CHAT.client.loadMessage = function (user, message, conversationID) {
                addMessageToConversation(message, user, conversationID);
            }
        })

        function returnConversationMessages(conversationID) {
            for (var i = 0; i < ALLCONVERSATIONS.length; i++) {
                if (ALLCONVERSATIONS[i].conversationID == conversationID) {
                    return ALLCONVERSATIONS[i].unpackMessages();
                }
            }
        }

        function setLoadedStatusTrue(conversationID) {
            for (var i = 0; i < ALLCONVERSATIONS.length; i++) {
                if (ALLCONVERSATIONS[i].conversationID === conversationID) {
                    ALLCONVERSATIONS[i].loaded = true;
                }
            }
        }

        CHAT.client.finishedLoadingConversation = function (conversationID) {
            setLoadedStatusTrue(conversationID);
            displayCachedConversation(conversationID);
        }

        function displayCachedConversation(conversationID) {
            makeConvDivVisible();
            var allMessages = returnConversationMessages(conversationID);
            for (var i = 0; i < allMessages.length; i++) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(allMessages[i].sender)
                    + '</strong>: ' + htmlEncode(allMessages[i].content) + '</li>');
            }
        }

        function displayConversations() {
            $(".conItem").remove();
            for (var i = 0; i < ALLCONVERSATIONS.length; i++) {
                var html = '<div class="conItem"><a href="javascript:void(0)" class="conItem" id="' + ALLCONVERSATIONS[i].conversationID + '", data-address="' + ALLCONVERSATIONS[i].name + '">' + ALLCONVERSATIONS[i].name + '</a><br/>' +
                    '<p>"' + ALLCONVERSATIONS[i].lastMessage + '", ' + ALLCONVERSATIONS[i].lastEdited + ',  </p><br/></div>';
                $('#mySideNav').append(html);
            }
        }

        //Generate list of conversations on side bar
        $(function () {
            CHAT.client.AddExistingConversation = function (c) {
                var con = new Conversation(c);
                ALLCONVERSATIONS.push(con);
            }
        })

        /////////
        CHAT.client.newConversationCreated = function (newCon) {
            var con = new Conversation(newCon);
            ALLCONVERSATIONS.push(con);
            conversationSort();
            displayConversations();

        }

        CHAT.client.allConversationsAdded = function () {
            displayConversations();
        }

        //Add new sent message to page
        CHAT.client.transferMessage = function (message, user, conID) {
           var cacheMessage = addNewMessageToConversation(message, user, conID);
           // Add the message to the page if user has this conversation loaded
           if (ONSCREENCONVERSATION == cacheMessage.conversationID) {
                $('#discussion').append('<li><strong>' + htmlEncode(cacheMessage.sender)
                    + '</strong>: ' + htmlEncode(cacheMessage.content) + '</li>');
            }
            else {
                console.log("client does not have this conversation loaded");
            }
        }

        function addNewMessageToConversation(message, user, conversationID) {
            var cacheMessage = new Message(message, user, conversationID);
            for (var i = 0; i < ALLCONVERSATIONS.length; i++) {
                if (ALLCONVERSATIONS[i].conversationID == cacheMessage.conversationID)
                {
                    ALLCONVERSATIONS[i].addMessage(cacheMessage);
                    ALLCONVERSATIONS[i].lastMessage = cacheMessage.content;
                    ALLCONVERSATIONS[i].lastEdited = cacheMessage.sent;
                }     
            }
            return cacheMessage;
        }

        function addMessageToConversation(message, user, conversationID) {
            var cacheMessage = new Message(message, user, conversationID);
            for (var i = 0; i < ALLCONVERSATIONS.length; i++) {
                if (ALLCONVERSATIONS[i].conversationID == cacheMessage.conversationID) {
                    ALLCONVERSATIONS[i].addMessage(cacheMessage);
                }
            }
        }

        $(function () {
            CHAT.client.newMessageNotification = function (conId) {
               // html = '<a href="javascript:void(0)" id="' + conId + '" onclick="goToMessage()">click here to view conversation</a><br/>';
                $('#newMessageNotificationSpan').text("You have a new message");
                //do something with this.
            }
        })

        /*
        Displaying Contacts, Starting New Conversation
        */
        $('#newConversationNavSpan').click(function () {
            //initialise recipients
            RECIPIENTS = [];
            $(".contactItem").remove();
            $('#contact-block').text("");
            CHAT.server.getContacts();         
        })
    
        CHAT.client.passContact = function (user) {
                var contact = new Contact(user);
                ALLCONTACTS.push(contact);
            }

        CHAT.client.ShowContacts = function () {
            displayContacts();
        }

        function displayContacts() {
            $(".contactItem").remove();
            for (var i = 0; i < ALLCONTACTS.length; i++)
            {
                html = '<a href="javascript:void(0)" class="contactItem" id=' + ALLCONTACTS[i].userID + '>' + ALLCONTACTS[i].userID + '<br/></a>';
                $('#newConversationSideNav').append(html);
            }
        }

        //Gets contactId from nav side bar
        $('#newConversationSideNav').on('click', 'a', function (event) {
            var contactId = $(this).attr('id');
            console.log(contactId);
            if (contactId !== undefined) {
                $('#contact-block').append(contactId + " ")
                RECIPIENTS.push(contactId);
            }
            if (RECIPIENTS.length == 2) {
                $('#myModal').modal('show');
                CONVERSATIONNAME = $('#conName').val();
            }
        })

        $('#startNewButton').click(function () {
            var conId = null; //undefined
            var conName = null; //undefined
            setDisplayForConversation(conId, conName);
        })

        $(function () {
            $('#sendmessage').click(function () {
                var message = $('#message').val();
                if (message.length > 0 && LIVECONVERSATIONID === null) {
                    CHAT.server.sendFirstMessage(message, RECIPIENTS, CONVERSATIONNAME);
                    // Clear text box and reset focus for next message.
                    $('#message').val('').focus();
                    RECIPIENTS = [];
                    CONVERSATIONNAME = null;
                }
                else if (message.length > 0 && LIVECONVERSATIONID !== null) {
                    CHAT.server.send(message, LIVECONVERSATIONID)
                    $('#message').val('').focus();
                }
            })
        })


</script>

}
